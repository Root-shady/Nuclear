GET     请求获取Request-URI所标识的资源
POST    在Request-URI所标识的资源后附加上新的数据
HEAD    请求获取Request-URI所标识的资源的响应消息报头
PUT     请求服务器存储的一个资源， 并用Request-URI作为其标识
DELETE  请求服务器删除Request-URI所标识的资源
TRACE   请求服务器回送收到的请求信息， 主要用于测试或诊断

内容类型(content-type)字段被用来判断接受到的文件格式
User-Agent: 标识用户代理
Referer 告诉服务器用户从哪里来
If-Modified-Since主要用来检查cache是否过期

HTTP 持久连接
    HTTP persistent connection, 是使用同一个TCP连接来发送和接收多个HTTP请求/应答, 而不是为每一个新的请求/应答打开一个新的连接方法.
    在HTTP1.1中， 所有的连接默认是持续连接， 在相关的协议上添加keep-alive的参数。

优势：
    较少的CPU和内存的使用
    允许请求和应答的HTTP管线化
    减低网络阻塞
    减低后续请求的延迟
    报告错误无需关闭TCP连接
缺点：
    对于单文件的不断请求服务， keep-alive可能会影响相关的服务器性能， 文件被请求后还保持不必要的连接时间
    For RESTful web services, your key goal must be to maintain visibility to the extent possible. Use each HTTP method such that it has the same semantics as specified by HTTP, and add appropriate headers to describe requests and response.
    Another part of maintaining visibility is used appropriate status codes and messages so that proxies, caches, and clients can determine the outcome of a request. 

1.2 When to trade visibility
    Visibility often competes with other architectural demands such as abstraction, loose coupling, efficiency, message granularity. 
    The trade-off is between visibility and client convenience and, potentially, network efficiency.
   (1). Client convenience
    Servers may need to design special-purpose coarse-graned composite resources for the sake of client convenience.
    (2). Abstraction
    To abstract complex business operations, servers may need to employ controller resources to make changes to other resources. Such resource can hide the details used to implement business operations.
    (3). Network efficiency
    A client is performing several operations in quick succession, you may need to combine such operations into batches to reduce network latency.


1.3 Maintain application state
    Manage state in RESTful web services such that you do not need to rely on in-memory session on servers.
    Encode application state into URIS, and include those URIs into representations via links. Let clients use these URIs to interact with resources. If the state is large or cannot be transported to clients for security or privacy reasons, store the application state in a durable storage, and encode a reference to that state in URIs.
    Application state is the state that the server needs to maintain between each request for each client.
    The server stores the quote data in a data store and encodes its primary key in the URI.
    (1). Choose a durable storage such as a database or a filesystem to store application state. Using a nondurable storage such as a cache or an in-memory session reduces the reliability of the web service as such state may not survive server restart. Such solutions may also reduce scalability of the server.

1.4 Implement safe and idempotent methods
    Safety and idempotency are guarantees that a server must provide to clients in its implementation for certain methods.
    Safety and idempotency are characteristics of HTTP methods for servers to implement.
    While implementing GET, OPTION, and HEAD methods, do not case any side effects. When a client resubmits a GET, HEAD, OPTIONS, PUT, or DELETE request, ensure that the server provides the same response except under concurrent conditions.
    In HTTP, safe methods are not expected to cause side effects. Clients can send requests with safe methods without worrying about causing unintended side effects. To provide this guarantee, implement safe methods as read-only operations.
    (2). Implementing idempotent methods
        Idempendency guarantees clients that can repeating a request has the same effects as making a request just once.



